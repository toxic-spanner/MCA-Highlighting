<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>mca</string>
		<string>mcassembly</string>
	</array>
	<key>name</key>
	<string>MCAssembly</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#Statement</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Anything that is not a word</string>
			<key>match</key>
			<string>[^\s;]</string>
			<key>name</key>
			<string>invalid.illegal.mca</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>Block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()\s*(\))\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.mca</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.mca</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Block without arguments</string>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Statement</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()\s*((out\s)?(([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(,)\s*)*(out\s)?(([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\))\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.mca</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.mca</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.begin.mca</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.mca</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.mca</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Block with arguments</string>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Statement</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Block without arguments or brackets</string>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Statement</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>Break</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Break statement</string>
					<key>match</key>
					<string>break</string>
					<key>name</key>
					<string>keyword.control.break.mca</string>
				</dict>
			</array>
		</dict>
		<key>CommandLiteral</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.command.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>string.other.command.mca</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.brace.command.begin.mca</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>string.interpolated.command.mca</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>meta.brace.command.end.mca</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>string.other.command.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Command literal</string>
					<key>match</key>
					<string>(/([$_a-zA-Z])([$_a-zA-Z0-9])*)([^\{\}]*)((\{)([^\{\}]*)(\})([^\{\}]*))*</string>
				</dict>
			</array>
		</dict>
		<key>Comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Single-line comments</string>
					<key>match</key>
					<string>//.*(\r\n|\r|\n)</string>
					<key>name</key>
					<string>comment.line.double-slash.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Multi-line comments</string>
					<key>match</key>
					<string>\*(.|\r|\n)*?\*</string>
					<key>name</key>
					<string>comment.block.mca</string>
				</dict>
			</array>
		</dict>
		<key>Continue</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Continue statement</string>
					<key>match</key>
					<string>continue</string>
					<key>name</key>
					<string>keyword.control.continue.mca</string>
				</dict>
			</array>
		</dict>
		<key>Expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.expression.end.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Bracketed expression</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.expression.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#Block</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.begin.mca</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.end.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Call expression without arguments</string>
					<key>match</key>
					<string>(\()\s*(\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Call expression with arguments</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>out operator</string>
							<key>match</key>
							<string>out\s</string>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Comma separator</string>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.mca</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#CommandLiteral</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Operators</string>
					<key>match</key>
					<string>==|!=|!|\+\+|--|\*=|/=|%=|\+=|-=|&gt;&gt;=|&lt;&lt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|&gt;=|&lt;=|&gt;|&lt;|=|&amp;&amp;|\|\||\+|-|\*|/|%|&gt;&gt;&gt;|&lt;&lt;|&gt;&gt;|&amp;|\^|\||~</string>
					<key>name</key>
					<string>keyword.operator.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Import expression</string>
					<key>match</key>
					<string>import</string>
					<key>name</key>
					<string>constant.language.import.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Identifier</string>
					<key>match</key>
					<string>([$_a-zA-Z])([$_a-zA-Z0-9])*</string>
					<key>name</key>
					<string>variable.language.mca</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Literal</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.begin.mca</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.end.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Internal call expression without arguments</string>
					<key>match</key>
					<string>(\.([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\()\s*(\))</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\.([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Internal call expression with arguments</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.call.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>out operator</string>
							<key>match</key>
							<string>out\s</string>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Comma separator</string>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.mca</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#MapExpression</string>
				</dict>
			</array>
		</dict>
		<key>If</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(if)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.if.mca</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.brace.condition.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>If statement</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.condition.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>Literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>NULL literal</string>
					<key>match</key>
					<string>null|NULL</string>
					<key>name</key>
					<string>constant.language.null.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Decimal number literal</string>
					<key>match</key>
					<string>(([0]|([1-9]([0-9]+)*))\.([0-9]+)*(([e])([+-]?[0-9]+))?)|(\.([0-9]+)(([e])([+-]?[0-9]+))?)|(([0]|([1-9]([0-9]+)*))(([e])([+-]?[0-9]+))?)</string>
					<key>name</key>
					<string>constant.numeric.decimal.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Hex number literal</string>
					<key>match</key>
					<string>[0][x]([0-9a-f])+</string>
					<key>name</key>
					<string>constant.numeric.hexadecimal.mca</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Octal number literal</string>
					<key>match</key>
					<string>[0]([0-7])+</string>
					<key>name</key>
					<string>constant.numeric.octal.mca</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#CommandLiteral</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>14</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Double-quote string literal</string>
					<key>match</key>
					<string>(\"(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*\")</string>
					<key>name</key>
					<string>string.quoted.double.mca</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>14</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Single-quoted string literal</string>
					<key>match</key>
					<string>(\'(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*\')</string>
					<key>name</key>
					<string>string.quoted.single.mca</string>
				</dict>
			</array>
		</dict>
		<key>Macro</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>macro without parameters or brackets</string>
					<key>match</key>
					<string>#([$_a-zA-Z])([$_a-zA-Z0-9])*</string>
					<key>name</key>
					<string>entity.name.function.mca</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.brace.macro.begin.mca</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.brace.macro.end.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>macro with brackets, no parameters</string>
					<key>match</key>
					<string>(#([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\()\s*(\))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.mca</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.mca</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.mca</string>
						</dict>
						<key>15</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.mca</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.mca</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.other.out.mca</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>macro with brackets and parameters</string>
					<key>match</key>
					<string>(#([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\()\s*((out\s)?(([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(,)\s*)*(out\s)?(([$_a-zA-Z])([$_a-zA-Z0-9])*)\s*(\))</string>
				</dict>
			</array>
		</dict>
		<key>MapExpression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.map.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Map expression</string>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.map.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Key/value colon</string>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>punctuation.definition.map.mca</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Comma separator</string>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.map.mca</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>Return</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Return statement</string>
					<key>match</key>
					<string>return</string>
					<key>name</key>
					<string>keyword.control.return.mca</string>
				</dict>
			</array>
		</dict>
		<key>Statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#StatementNoBlock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Block</string>
				</dict>
			</array>
		</dict>
		<key>StatementNoBlock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#Comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#If</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#While</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Continue</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Break</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Return</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#Macro</string>
				</dict>
			</array>
		</dict>
		<key>Switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Switch statement</string>
					<key>match</key>
					<string>switch</string>
					<key>name</key>
					<string>keyword.control.switch.mca</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(case)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.case.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Case statement</string>
					<key>end</key>
					<string>(:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.switch.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>While</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(while)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.while.mca</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.brace.condition.begin.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>While statement</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.condition.end.mca</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#Expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(do)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.dowhile.do.mca</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Do-while</string>
					<key>end</key>
					<string>(while)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.dowhile.while.mca</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.mca</string>
	<key>uuid</key>
	<string>84ce58c0-b8dc-403f-acac-1c9dca175b6f</string>
</dict>
</plist>
